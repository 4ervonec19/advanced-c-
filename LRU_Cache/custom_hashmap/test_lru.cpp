#include "lru.hpp"
#include <cassert>
#include <iostream>
#include <string>
#include <vector>

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LRU-–∫—ç—à–∞
void testLRU_Cache() {

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LRU-–∫—ç—à —Ä–∞–∑–º–µ—Ä–∞ 3 –∏ –ø–∞–º—è—Ç–∏ 1024 –±–∞–π—Ç–∞
  LRU_Cache<std::string, std::vector<float>> cache(3, 1024);
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã (–Ω—É–ª–µ–≤—ã–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏)
  assert(cache.size() == 0);
  assert(cache.size_bytes() == 0);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
  assert(cache.add_note(
      "key1",
      std::vector<float>(4, 1.0f))); // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ 1.0f –ø–æ –∫–ª—é—á—É "key1"
  assert(cache.add_note(
      "key1", std::vector<float>(4, 1.25f))); // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ 1.25f –ø–æ –∫–ª—é—á—É
                                              // "key1" (–û–±–Ω–æ–≤–ª—è–µ–º –ø–æ —Å—É—Ç–∏)
  assert(cache.add_note(
      "key2",
      std::vector<float>(4, 2.0f))); // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ 2.0f –ø–æ –∫–ª—é—á—É "key2"
  assert(cache.size() ==
         2); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –æ—Å—Ç–∞–ª—Å—è 2 –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ 3 –æ–ø–µ—Ä–∞—Ü–∏–∏
  assert(cache.size_bytes() ==
         40); // float = 4 –±–∞–π—Ç–∞ (–∏—Ç–æ–≥–æ: 4*4(—Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞)*2(–∫–æ–ª-–≤–æ –∑–∞–ø–∏—Å–µ–π))
              // + 4(—Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∏–Ω–≥–æ–≤)*2(–∫–æ–ª-–≤–æ –∑–∞–ø–∏—Å–µ–π)

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∫–ª—é—á–∞
  assert(cache.add_note("–∫–ª—é—á3", std::vector<float>(4, 3.0f)));
  assert(cache.size() == 3);

  // –î–æ–±–∞–≤–ª—è–µ–º —á–µ—Ç–≤–µ—Ä—Ç—ã–π
  assert(cache.add_note(
      "key4",
      std::vector<float>(4, 3.0f))); // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ 3.0f –ø–æ –∫–ª—é—á—É "key4"
  // –î–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ, –∫–∞–∫ —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ –≤ –∫—ç—à–µ
  assert(!cache.get("key1")); // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å false
  assert(cache.size() == 3);  // –†–∞–∑–º–µ—Ä –æ—Å—Ç–∞–≤–ª—Å—è —Ä–∞–≤–Ω—ã–π —Ç—Ä—ë–º

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  assert(cache.add_note(
      "key2",
      std::vector<float>(4, 10.0f))); // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É "key2"
  assert(cache.size() == 3);          // –†–∞–∑–º–µ—Ä –æ—Å—Ç–∞–ª—Å—è —Ä–∞–≤–µ–Ω 3

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ get() –Ω–∞ true
  assert(cache.get("–∫–ª—é—á3"));

  cache.print_cache();

  // // –ü—Ä–æ–≤–µ—Ä–∫–∞ clear
  cache.clear();
  assert(cache.size() == 0);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ 3-x –∏ 4-x –±–∞–π—Ç–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤:
  cache.add_note("—É–ª—ã–±–∫–∞ üòÄ", std::vector<float>(4, 10.0f));
  cache.add_note("–ï–≤—Ä–æ–Ω—Å–∫–∏–π ‚Ç¨", std::vector<float>(4, 10.0f));

  std::cout << "All LRU_Cache tests passed successfully!" << std::endl;
}

void testLRU_CacheMemory() {

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LRU-–∫—ç—à —Ä–∞–∑–º–µ—Ä–∞ 3 –∏ –ø–∞–º—è—Ç–∏ 1024 –±–∞–π—Ç–∞
  LRU_Cache<std::string, std::vector<float>> cache(3, 1024);
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã (–Ω—É–ª–µ–≤—ã–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏)
  assert(cache.size() == 0);
  assert(cache.size_bytes() == 0);

  // // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –ø–∞–º—è—Ç—å—é
  assert(cache.add_note("test1", std::vector<float>(64, 15.0f)));
  assert(cache.add_note("test2", std::vector<float>(64, 20.0f)));
  assert(cache.add_note("test3", std::vector<float>(64, 25.0f)));

  // –†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ç—å 3
  assert(cache.size() == 3);

  // // –î–æ–±–∞–≤–ª—è–µ–º —á–µ—Ç–≤–µ—Ä—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ "test1"
  assert(cache.add_note("test4", std::vector<float>(64, 30.0f)));
  assert(cache.size_bytes() ==
         783); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö –Ω–µ —É–≤–µ–ª–∏—á–∏–ª—Å—è

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –±–û–ª—å—à–µ–π, —á–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–ø–∏—Å–∏
  assert(!cache.add_note("aaaaaaaaaa", std::vector<float>(256, 30.0f)));
  assert(cache.size() == 3);
  std::cout << "All LRU_Cache Memory tests passed successfully!" << std::endl;
}

// –î–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ö—ç—à-—Ç–∞–±–ª–∏—Ü—É
void testHashTable() {

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—É—Ä–µ–º —Å —Ä–∞–∑–º–µ—Ä–æ–º 4
  LRU_Cache<std::string, std::vector<float>> cache(8, 8192);
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã (–Ω—É–ª–µ–≤—ã–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏)
  assert(cache.size() == 0);
  assert(cache.size_bytes() == 0);

  // –î–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å rehash() –≤–Ω—É—Ç—Ä–∏ hashtable
  assert(cache.add_note("test1", std::vector<float>(64, 15.0f)));
  assert(cache.add_note("test2", std::vector<float>(64, 20.0f)));
  assert(cache.add_note("test3", std::vector<float>(64, 25.0f)));
  assert(cache.add_note("test4", std::vector<float>(64, 35.0f)));
  assert(cache.add_note("test5", std::vector<float>(64, 45.0f)));
  assert(cache.add_note("test6", std::vector<float>(64, 55.0f)));
  assert(cache.add_note("test7", std::vector<float>(64, 65.0f)));
  assert(cache.add_note("test8", std::vector<float>(64, 75.0f)));

  std::cout << "All HashTable tests passed successfully" << std::endl;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
int main() {
  testLRU_Cache();
  testLRU_CacheMemory();
  testHashTable();
  return 0;
}
